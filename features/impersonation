# ArgoCD Impersonation Feature for Enhanced Security

## Overview
Add impersonation support to strengthen security by creating dedicated service accounts per tenant namespace instead of using a single powerful service account. This follows the principle of least privilege and integrates with [ArgoCD's impersonation feature](https://argo-cd.readthedocs.io/en/latest/operator-manual/app-sync-using-impersonation/).

## Requirements

### Configuration
* Add a service-level configuration `impersonation` which defaults to `false`
* When `impersonation` is `true`, another variable `impersonation_role` must be set
* On startup, verify that `impersonation_role` is a valid ClusterRole
* When enabled, ensure ArgoCD has impersonation feature enabled (`application.sync.impersonation.enabled: "true"`)

### Startup Validation
* Verify that `impersonation_role` exists as a ClusterRole
* **Security Warnings for ClusterRole:**
  - Warn if ClusterRole has `cluster-admin` or `*` verbs on `*` resources
  - Warn if ClusterRole has permissions that span namespaces (e.g., list/watch cluster-wide)
  - Warn if ClusterRole allows modification of cluster-scoped resources (nodes, namespaces, etc.)
  - Validate it follows reasonable security practices for GitOps operations

### Registration Flow (Enhanced)
When a new registration happens (either for a new or existing namespace):

1. **Check for Existing Registration**
   - Query AppProjects by label `gitops.io/repository-hash: <repo-hash>` for scalability
   - If AppProject exists for repository, return 409 error (no multiple registrations allowed)
2. **Create Target Namespace** (if not exists)
3. **Create Service Account** in the **target namespace**
   - Use `generateName` with base name `gitops-sa-` (e.g., `gitops-sa-xyz123`)
   - Location: Created in `$tenant_namespace` for better isolation
   - Unique naming prevents conflicts with existing service accounts
4. **Create RoleBinding** in the target namespace
   - Binds the `impersonation_role` ClusterRole to the generated service account
   - Scoped to the target namespace only
5. **Create AppProject** with impersonation reference
   - Add label `gitops.io/repository-hash: <repo-hash>` for conflict detection
   - Configure `destinationServiceAccounts` referencing the generated service account
6. **Create Application**

### Error Handling
* If AppProject already exists for repository: **return 409 error** (no multiple registrations)
* If service account creation fails but namespace creation succeeds: **remove the namespace**
* If RoleBinding creation fails: clean up service account and namespace
* Atomic operation: all resources created or none created

### Backward Compatibility
* When `impersonation: false` (default): system behaves exactly as current implementation
* No service accounts created, AppProjects without `destinationServiceAccounts`
* Existing functionality unchanged

## ArgoCD Integration Details

Based on [ArgoCD's impersonation documentation](https://argo-cd.readthedocs.io/en/latest/operator-manual/app-sync-using-impersonation/):

### AppProject Configuration
```yaml
apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: my-project
  namespace: argocd
  labels:
    gitops.io/repository-hash: "a1b2c3d4"  # For conflict detection
spec:
  destinationServiceAccounts:
    - server: https://kubernetes.default.svc
      namespace: my-new-ns
      defaultServiceAccount: gitops-sa-abc123  # Generated SA name
  destinations:
    - namespace: my-new-ns
      server: https://kubernetes.default.svc
  sourceRepos:
    - http://git-servers.git-servers.svc.cluster.local/git/repo.git
```

### ArgoCD ConfigMap Requirement
The ArgoCD cluster must have impersonation enabled:
```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cm
  namespace: argocd
data:
  application.sync.impersonation.enabled: "true"
```

## Repository Conflict Detection (Scalable)

For efficiency with thousands of AppProjects:
* **Label-based querying**: Use `gitops.io/repository-hash: <hash>` label on AppProjects
* **Hash generation**: Create SHA-256 hash of repository URL for consistent labeling
* **Efficient lookup**: `kubectl get appprojects -l gitops.io/repository-hash=<hash>` scales well
* **No full table scans**: Avoid iterating through all AppProjects

## Example Workflow

```yaml
# Configuration
impersonation: true
impersonation_role: "gitops-deployer"  # ClusterRole with limited permissions
```

**Registration Process:**
1. Register namespace `my-new-ns` with repository `https://git.example.com/repo.git`
2. GitOps Registration Service:
   - Generates repository hash: `a1b2c3d4...`
   - Checks: No AppProject with label `gitops.io/repository-hash=a1b2c3d4` âœ“
   - Creates namespace `my-new-ns`
   - Creates ServiceAccount with generated name `gitops-sa-abc123` in `my-new-ns`
   - Creates RoleBinding in `my-new-ns` binding ClusterRole `gitops-deployer` to `gitops-sa-abc123`
   - Creates AppProject with:
     - Label: `gitops.io/repository-hash: a1b2c3d4`
     - `destinationServiceAccounts` referencing `my-new-ns/gitops-sa-abc123`
   - Creates Application

**Result:** ArgoCD uses `gitops-sa-abc123` service account for sync operations, which only has permissions defined by `gitops-deployer` ClusterRole within `my-new-ns` namespace.

## Security Benefits

### ðŸ”’ **Enhanced Security**
1. **Namespace Isolation**: Service accounts isolated per tenant namespace
2. **Least Privilege**: Each tenant gets minimal required permissions
3. **No Cross-tenant Access**: Service accounts cannot access other tenants' resources
4. **Audit Trail**: Clear mapping of service accounts to tenant namespaces
5. **No Registration Conflicts**: Single registration per repository prevents confusion
6. **ArgoCD Privilege Separation**: ArgoCD control plane separated from tenant sync operations

### ðŸš¨ **Security Considerations**
1. **ClusterRole Permissions**: Validate `impersonation_role` is not overly permissive
2. **Service Account Tokens**: Consider using bound service account tokens
3. **Role Validation**: Ensure ClusterRole exists and is appropriate
4. **Cleanup**: Implement proper cleanup when namespaces are deleted

## Testing Strategy

### Integration Tests
Create comprehensive tests to validate security boundaries using existing test patterns:

1. **Setup Test ClusterRole**
   ```yaml
   apiVersion: rbac.authorization.k8s.io/v1
   kind: ClusterRole
   metadata:
     name: test-gitops-impersonator
   rules:
   - apiGroups: [""]
     resources: ["secrets", "configmaps"]
     verbs: ["create", "get", "list", "update"]
   - apiGroups: ["apps"]
     resources: ["deployments"]
     verbs: ["create", "get", "list"]
   # Intentionally limited - no services, no cluster-wide access
   ```

2. **Positive Tests**
   - Verify service account can create secrets/configmaps in its assigned namespace
   - Verify service account can create deployments in its assigned namespace
   - Verify RoleBinding correctly grants permissions
   - Verify AppProject references correct service account with `destinationServiceAccounts`
   - Verify generated service account name follows `gitops-sa-*` pattern
   - Verify AppProject has correct repository hash label

3. **Enhanced Negative Security Tests** (Multiple Tenant Namespaces)
   - Create tenant-a and tenant-b namespaces with separate service accounts
   - Ensure tenant-a service account **CANNOT** create secrets in tenant-b namespace
   - Ensure tenant-a service account **CANNOT** create services (not in ClusterRole)
   - Ensure service accounts **CANNOT** access cluster-wide resources
   - Verify complete tenant isolation between multiple namespaces

4. **Repository Conflict Tests**
   - Test duplicate registration for same repository returns 409 error
   - Verify no resources created on duplicate registration attempt
   - Test that different repositories can use same namespace name
   - Test label-based conflict detection scales with many AppProjects

5. **Error Handling Tests**
   - Test namespace cleanup when service account creation fails
   - Test behavior with invalid ClusterRole references
   - Test cleanup when RoleBinding creation fails

6. **ArgoCD Integration Tests**
   - Verify AppProject `destinationServiceAccounts` configuration
   - Test ArgoCD sync uses correct service account (requires ArgoCD impersonation enabled)
   - Validate impersonation works end-to-end

### Unit Tests
- Configuration validation
- Service account generation and creation logic
- RBAC validation functions
- Error handling and cleanup logic
- Repository conflict detection and hash generation
- ClusterRole security validation

## Configuration Example

```yaml
# Enhanced configuration structure
impersonation:
  enabled: false
  cluster_role: "gitops-deployer"           # ClusterRole to bind
  validate_permissions: true                # Warn on overly permissive roles
  auto_cleanup: true                        # Clean up on namespace deletion
```

## Implementation Notes

1. **Timing**: Service account creation MUST happen before AppProject creation
2. **ArgoCD Integration**: AppProject must reference service account in `destinationServiceAccounts`
3. **Atomic Operations**: Use transactions/cleanup logic to ensure consistency
4. **Unique Naming**: `generateName: "gitops-sa-"` ensures no naming conflicts
5. **Single Registration**: Check AppProject existence via labels to prevent multiple registrations
6. **Scalable Conflict Detection**: Use label selectors for efficient AppProject queries
7. **Monitoring**: Add metrics for impersonation usage and failures

## Integration with Existing Tests

Several existing tests can be enhanced to include impersonation validation:
- `test_cross_namespace_deployment_prevention` - add service account isolation checks
- `test_tenant_separation_security` - verify service account cannot cross tenant boundaries  
- `test_namespace_security_restrictions` - validate service account permissions are limited
- Add new `test_impersonation_security` - comprehensive service account isolation testing
- Add new `test_impersonation_argocd_integration` - verify ArgoCD uses correct service accounts


